"""This script sets up the vs-code settings for the OmniWorld project.

This script merges the python.analysis.extraPaths from the "_isaac_lab/_isaac_sim/.vscode/settings.json" file into
the ".vscode/settings.json" file.
"""

import argparse
import os
import re
from pathlib import Path

WS_DIR = Path(__file__).parents[2]
"""Path to the workspace directory."""


def overwrite_python_default_interpreter_path(ws_settings: str, interpreter_path: str) -> str:
    """Overwrite the python.defaultInterpreterPath in the workspace settings file.

    The defaultInterpreterPath is replaced with the absolute path to Isaac Sim's bundled Python.

    Args:
        ws_settings: The settings string to manipulate.
        interpreter_path: The path to the Python interpreter.

    Returns:
        The settings string with overwritten python analysis extra paths.
    """
    settings = re.sub(
        r"\"python.defaultInterpreterPath\": \".*?\"",
        f'"python.defaultInterpreterPath": "{interpreter_path}"',
        ws_settings,
        flags=re.DOTALL,
    )

    return settings


def overwrite_python_analysis_extra_paths(
    ws_settings: str,
    isaac_sim_dir: Path,
    isaac_lab_dir: Path,
) -> str:
    """Overwrite the python.analysis.extraPaths in the workspace settings file.

    The extraPaths are replaced with the path names from the isaac-sim settings file that exists in the
    "_isaac_lab/_isaac_sim/.vscode/settings.json" file.

    Args:
        ws_settings: The settings string to use as template.
        isaac_sim_dir: The path to the isaac-sim directory.
        isaac_lab_dir: The path to the isaac-lab directory.

    Returns:
        The settings string with overwritten python analysis extra paths.

    Raises:
        FileNotFoundError: If the isaac-sim settings file does not exist.
    """
    # Read isaac-sim settings
    isaac_sim_vscode_settings_path = isaac_sim_dir / ".vscode" / "settings.json"
    if not isaac_sim_vscode_settings_path.exists():
        raise FileNotFoundError(f"Could not find the isaac-sim settings file: {isaac_sim_vscode_settings_path}")
    with open(isaac_sim_vscode_settings_path) as f:
        vscode_settings = f.read()

    # search for the python.analysis.extraPaths section and extract the contents
    settings = re.search(r"\"python.analysis.extraPaths\": \[.*?\]", vscode_settings, flags=re.MULTILINE | re.DOTALL)
    if settings is None:
        raise ValueError("Could not find the python.analysis.extraPaths section in the isaac-sim settings file")
    settings = settings.group(0)
    settings = settings.split('"python.analysis.extraPaths": [')[-1]
    settings = settings.split("]")[0]

    # change the path names to be absolute paths
    path_names = settings.split(",")
    path_names = [path_name.strip().strip('"') for path_name in path_names]
    path_names = ['"' + str(isaac_sim_dir / path_name) + '"' for path_name in path_names if len(path_name) > 0]

    # add the path names that are in the Isaac Lab extensions directory
    for ext_dir in (isaac_lab_dir / "source" / "extensions").iterdir():
        if ext_dir.is_dir():
            path_names.append('"' + str(ext_dir) + '"')

    # combine them into a single string
    path_names = ",\n\t\t".expandtabs(4).join(path_names)

    # replace the path names in the VSCode settings file with the path names from the isaac-sim settings file
    ws_settings = re.sub(
        r"\"python.analysis.extraPaths\": \[.*?\]",
        '"python.analysis.extraPaths": [\n\t\t'.expandtabs(4) + path_names + "\n\t]".expandtabs(4),
        ws_settings,
        flags=re.DOTALL,
    )

    # return the settings string
    return ws_settings


def header_msg(src: Path):
    return (
        "// This file is a template and is automatically generated by the setup_vscode.py script.\n"
        "// Do not edit this file directly.\n"
        "//\n"
        f"// Generated from: {str(src)}\n"
    )


def main():
    parser = argparse.ArgumentParser(description="Setup VSCode")
    parser.add_argument("--python", type=str, default=None, help="Python interpreter path")
    args = parser.parse_args()

    isaac_lab_path = WS_DIR / "_isaac_lab"
    if not isaac_lab_path.exists():
        raise FileNotFoundError(f"Could not find the Isaac Lab directory: {isaac_lab_path}")

    isaac_sim_path = isaac_lab_path / "_isaac_sim"
    if not isaac_sim_path.exists():
        raise FileNotFoundError(f"Could not find the Isaac Sim directory: {isaac_sim_path}")

    # Get the absolute path to the Isaac Sim directory
    isaac_sim_path = isaac_sim_path.resolve()

    # Read workspace template settings
    settings_template_path = WS_DIR / ".vscode" / "tools" / "settings.template.json"
    if not os.path.exists(settings_template_path):
        raise FileNotFoundError(f"Could not find the VSCode settings file: {settings_template_path}")
    with open(settings_template_path) as f:
        settings_template = f.read()

    # Overwrite the python.analysis.extraPaths in the Isaac Lab settings file with the path names
    settings = overwrite_python_analysis_extra_paths(
        settings_template,
        isaac_sim_dir=isaac_sim_path,
        isaac_lab_dir=isaac_lab_path,
    )

    # Overwrite the python.defaultInterpreterPath
    if args.python:
        python_path = args.python
    else:
        python_path = str(isaac_sim_path / "python.sh")

    print(f"[INFO] Using Python interpreter: {python_path}")

    settings = overwrite_python_default_interpreter_path(settings, python_path)

    # add template notice to the top of the file
    settings = header_msg(settings_template_path) + settings

    # write the Isaac Lab settings file
    settings_path = WS_DIR / ".vscode" / "settings.json"
    with open(settings_path, "w") as f:
        f.write(settings)


if __name__ == "__main__":
    main()
